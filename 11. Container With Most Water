"""
Time Complexity: O(n). 
As only one traversal of the array is required, so time complexity is O(n).
Space Complexity: O(1). 
No extra space is required, so space complexity is constant.
"""

def maxArea(self, height: List[int]) -> int:
    start = 0 
    end = len(height) -1
    maxSum = 0
    while start < end:
        maxSum = max(maxSum,(end-start) * min(height[start],height[end]))
        if height[start] > height[end]:
            end -= 1
        else:
            start +=1
    return maxSum 
